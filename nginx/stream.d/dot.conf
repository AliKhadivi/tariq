
# server {
#     listen 853 ssl;

#     # ssl_certificate ${cert_path};
#     # ssl_certificate_key ${key_path};

#     # ssl_protocols TLSv1.2 TLSv1.3;
#     # ssl_ciphers HIGH:!aNULL:!MD5;
#     # ssl_prefer_server_ciphers on;
        
#     # ssl_handshake_timeout 10s;
#     # ssl_session_cache shared:SSL:20m;
#     # ssl_session_timeout 4h;
#         ssl_certificate ${cert_path};
#         ssl_certificate_key ${key_path};
#         # ssl_dhparam ${dhparam_path};
#         # ssl_protocols TLSv1.2 TLSv1.3;          # TLS 1.3 requires nginx >= 1.13.0
#         # ssl_prefer_server_ciphers on;
#         # ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
#         # ssl_ecdh_curve secp384r1;               # Requires nginx >= 1.1.0
#         # ssl_session_timeout  10m;
#         # ssl_session_cache shared:SSLDOT:10m;
#         # ssl_session_tickets off;                # Requires nginx >= 1.5.9
#         # ssl_stapling on;                        # Requires nginx >= 1.3.7
#         # ssl_stapling_verify on;                 # Requires nginx => 1.3.7
#         # ssl_early_data off;                     # 0-RTT, enable if desired - Requires nginx >= 1.15.4
#         # resolver 1.1.1.1 valid=300s;            # Replace with your local resolver
#         # resolver_timeout 5s;

#     proxy_pass dns-servers;
# }


  # KeyValue store for blocking domains (NGINX Plus only)
  # keyval_zone zone=dns_config:64k state=/etc/nginx/zones/dns_config.zone; 
  # keyval "blocked_domains" $blocked_domains zone=dns_config;
  # keyval "blackhole_domains" $blackhole_domains zone=dns_config;
  # keyval $dns_qname $scrub_action zone=dns_config;

  # DNS logging
  log_format  dns   '$remote_addr [$time_local] $protocol "$dns_qname" "$upstream_pool"';
  access_log /var/log/nginx/dns-access.log dns;

  # Import the NJS DNS module
  js_import /etc/nginx/njs.d/dns/dns.js;

  # The $dns_qname variable can be populated by preread calls, and can be used for DNS routing
  js_set $dns_qname dns.get_qname;
  
  # The DNS response packet, if we're blocking the domain, this will be set.
  js_set $dns_response dns.get_response;


#   upstream tariq-dns {
#     zone dns 64k;
#     server    127.0.0.1:53;
# }
# upstream tariq-dot {
#     zone dns 64k;
#     server    127.0.0.1:853;
# }


  # upstream pool for blocked requests
  upstream blocked {
    zone blocked 64k;
    server 127.0.0.1:9953;
  }

  upstream blackhole {
    zone blackhole 64k;
    server 127.0.0.1:9853;
  }

  # upstream pools (google DNS)
  upstream google {
    zone dns 64k;
    server 127.0.0.1:53;
  }

  # upstream pools (another DNS)
  upstream dnsmasq {
    zone dns 64k;
    server 192.168.64.1:5353;
  }

  # DNS upstream pool.
  upstream dns {
    zone dns 64k;
    server tariq:53;
  }

  # DNS over TLS upstream pool
  upstream dot {
    zone dot 64k;
    server 127.0.0.1:853;
  }
  # When doing DNS routing, use $dns_qname to map the questions to the upstream pools.
  map $dns_qname $upstream {
    # hostnames;
    # *.nginx dnsmasq;
    # *.k8s dnsmasq;
    default dns;
  }

  # Set upstream to be the pool defined above if dns_response is empty, else pass to the @block location
  map $dns_response $upstream_pool {
    # "blocked" blocked;
    # "blackhole" blackhole;
    default $upstream;
  }


  # DNS(TCP) and DNS over TLS (DoT) Server
  # Upstream can be either DNS(TCP) or DoT. If upstream is DNS, proxy_ssl should be off.
  server {
    listen 553;
    listen 853 ssl;
    ssl_certificate /ssl/cert.pem;
    ssl_certificate_key /ssl/key.pem;
    js_preread dns.preread_dns_request;
    #proxy_ssl on;
    proxy_pass dns;
  }

  # DNS(UDP) Server
  # Upstream can only be another DNS(UDP) server.
  server {
    listen 553 udp;
    js_preread dns.preread_dns_request;
    proxy_responses 1;
    proxy_pass dns;
  }

  # DNS over HTTPS (gateway) Service
  # Upstream can be either DNS(TCP) or DoT. If upstream is DNS, proxy_ssl should be off.
  server {
    listen 127.0.0.1:8053;
    js_filter dns.filter_doh_request;
    proxy_ssl on;
    proxy_pass dot;
  }

  # Server for sending blackhole/blocked responses
  server {
    listen 127.0.0.1:9953;
    listen 127.0.0.1:9853;
    listen 127.0.0.1:9953 udp;
    listen 127.0.0.1:9853 udp;
    js_preread dns.preread_dns_request;
    return dns;
  }


